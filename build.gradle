import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.jetbrains.grammarkit.tasks.*

plugins {
    id "org.jetbrains.intellij" version "0.4.11"
    id "com.palantir.git-version" version "0.12.3"
    id "org.jetbrains.grammarkit" version "2021.1.3"
}

def htmlFixer = { htmlFile -> file(htmlFile).text.replace('<html>', '').replace('</html>', '') }

apply plugin: 'idea'

apply plugin: 'java'
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

apply plugin: 'org.jetbrains.intellij'
apply plugin: 'org.jetbrains.grammarkit'

intellij {
    version ideaVersion
    updateSinceUntilBuild false
    plugins = [
            "com.jetbrains.php:${phpPluginVersion}",
            "com.jetbrains.twig:${twigPluginVersion}",
            "com.jetbrains.php.dql:${dqlPluginVersion}",
            "de.espend.idea.php.annotation:${annotationPluginVersion}",
            "de.espend.idea.php.toolbox:${toolboxPluginVersion}",
            'coverage',
            'webDeployment',
            'yaml',
            'CSS',
            'java-i18n',
            'properties',
            'xpath',
            'java'
    ]
    pluginName 'Symfony Support'

    // Can't instantiate configurable for PHP Toolbox
    // at de.espend.idea.php.toolbox.ui.application.ToolboxApplicationForm.<init>(ToolboxApplicationForm.java:26)
    tasks {
        "buildSearchableOptions" {
            enabled = false
        }
    }
}

patchPluginXml {
    sinceBuild '211'
    changeNotes = htmlFixer('src/main/resources/META-INF/change-notes.html')
}

publishPlugin {
    token System.getenv('IJ_TOKEN')
}

task generateExpressionLanguageLexer(type: GenerateLexer) {
    source = 'src/main/java/fr/adrienbrault/idea/symfony2plugin/expressionLanguage/ExpressionLanguage.flex'
    targetDir = 'src/main/gen/fr/adrienbrault/idea/symfony2plugin/expressionLanguage/'
    targetClass = 'ExpressionLanguageLexer'
}

task generateExpressionLanguageParser(type: GenerateParser) {
    source = 'src/main/java/fr/adrienbrault/idea/symfony2plugin/expressionLanguage/ExpressionLanguage.bnf'
    targetRoot = 'src/main/gen'
    pathToParser = 'src/main/gen/fr/adrienbrault/idea/symfony2plugin/expressionLanguage/ExpressionLanguageParser.java'
    pathToPsiRoot = 'src/main/gen/fr/adrienbrault/idea/symfony2plugin/expressionLanguage/psi'
}

compileJava {
    dependsOn generateExpressionLanguageLexer
    dependsOn generateExpressionLanguageParser
}

group 'fr.adrienbrault.idea.symfony2plugin'

def details = versionDetails()
if (details.isCleanTag) {
    version = "${details.lastTag}"
} else {
    version = "${details.lastTag}.${details.gitHash}-SNAPSHOT"
}

wrapper {
    gradleVersion '5.5.1'
}

test.testLogging.exceptionFormat = TestExceptionFormat.FULL

// Include the generated files in the source set
sourceSets.main.java.srcDirs 'src/main/gen'
